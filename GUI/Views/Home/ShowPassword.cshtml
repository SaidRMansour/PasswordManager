@{
    ViewData["Title"] = "Show Passwords";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}

<h1>@ViewData["Title"]</h1>
@if (ViewBag.DecryptedPasswords != null && ViewBag.DecryptedPasswords.Count > 0)
{
    <div>
        @for (int i = 0; i < ViewBag.DecryptedPasswords.Count; i++)
        {
            <div class="form-group">
                <div class="input-group">
                    <input type="password" id="password-@i" class="form-control" value="******" />
                    <div class="input-group-append">
                        <button class="btn btn-info" data-index="@i" data-shown="false" onclick="togglePasswordVisibility(this);">Show</button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No passwords to display.</p>

}



<script>
// Function to toggle the visibility of passwords
function togglePasswordVisibility(button) {
    var index = button.getAttribute('data-index');
    var passwordInput = document.getElementById(`password-${index}`);

    // Check if the password is already being shown
    if (button.getAttribute('data-shown') === 'false') {
        // Fetch and display the decrypted password
        fetch(`@Url.Action("GetDecryptedPassword", "Home")?index=${index}`)
            .then(response => response.text())
            .then(password => {
                passwordInput.value = password;
                passwordInput.type = 'text';
                button.innerText = 'Hide'; // Change button text to "Hide"
                button.setAttribute('data-shown', 'true');
            });
    } else {
        // Hide the password and revert to placeholder or default value
        passwordInput.type = 'password';
        button.innerText = 'Show'; // Change button text back to "Show"
        button.setAttribute('data-shown', 'false');
        passwordInput.value = '******'; // Revert to placeholder value
    }
}
</script>